From 0a42baa2e21b6a0cca826592c59f648adca9a01c Mon Sep 17 00:00:00 2001
From: Martyn Taylor <mtaylor@redhat.com>
Date: Thu, 16 Mar 2017 13:14:29 +0000
Subject: [PATCH 3/3] Logger Statements

---
 .../persistence/impl/journal/JournalStorageManager.java | 17 +++++++++++++++++
 .../artemis/core/replication/ReplicationEndpoint.java   |  1 +
 .../artemis/core/replication/ReplicationManager.java    |  3 +++
 3 files changed, 21 insertions(+)

diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/JournalStorageManager.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/JournalStorageManager.java
index 7c0a651..fea73c0 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/JournalStorageManager.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/JournalStorageManager.java
@@ -518,6 +518,7 @@ public class JournalStorageManager extends AbstractJournalStorageManager {
 
       // We first do a compact without any locks, to avoid copying unnecessary data over the network.
       // We do this without holding the storageManager lock, so the journal stays open while compact is being done
+      System.out.println("11111111111111111 FIRST SCHEDULE AND COMPACT");
       originalMessageJournal.scheduleCompactAndBlock(-1);
       originalBindingsJournal.scheduleCompactAndBlock(-1);
 
@@ -530,6 +531,8 @@ public class JournalStorageManager extends AbstractJournalStorageManager {
 
       try {
          Map<SimpleString, Collection<Integer>> pageFilesToSync;
+
+         System.out.println("11111111111111111 LOCKING STORAGE MANAGER");
          storageManagerLock.writeLock().lock();
          try {
             if (isReplicated())
@@ -537,15 +540,18 @@ public class JournalStorageManager extends AbstractJournalStorageManager {
             replicator = replicationManager;
 
             // Establishes lock
+            System.out.println("11111111111111111 LOCKING JOURNALS");
             originalMessageJournal.synchronizationLock();
             originalBindingsJournal.synchronizationLock();
 
             try {
+               System.out.println("11111111111111111 PRESEVING OLD FILES");
                originalBindingsJournal.replicationSyncPreserveOldFiles();
                originalMessageJournal.replicationSyncPreserveOldFiles();
 
                pagingManager.lock();
                try {
+                  System.out.println("11111111111111111 PREPARING JOURNALS FOR COPY");
                   pagingManager.disableCleanup();
                   messageFiles = prepareJournalForCopy(originalMessageJournal, JournalContent.MESSAGES, nodeID, autoFailBack);
                   bindingsFiles = prepareJournalForCopy(originalBindingsJournal, JournalContent.BINDINGS, nodeID, autoFailBack);
@@ -558,6 +564,8 @@ public class JournalStorageManager extends AbstractJournalStorageManager {
                originalMessageJournal.synchronizationUnlock();
                originalBindingsJournal.synchronizationUnlock();
             }
+
+            System.out.println("11111111111111111 CREATING NEW REPLICATED JOURNALS");
             bindingsJournal = new ReplicatedJournal(((byte) 0), originalBindingsJournal, replicator);
             messageJournal = new ReplicatedJournal((byte) 1, originalMessageJournal, replicator);
 
@@ -568,14 +576,23 @@ public class JournalStorageManager extends AbstractJournalStorageManager {
             storageManagerLock.writeLock().unlock();
          }
 
+         System.out.println("11111111111111111 SENDING MESSAGE JOURNAL FILES");
          sendJournalFile(messageFiles, JournalContent.MESSAGES);
+
+         System.out.println("11111111111111111 SENDING BINDINGS FILES");
          sendJournalFile(bindingsFiles, JournalContent.BINDINGS);
+
+         System.out.println("11111111111111111 SENDING LARGE MESSAGES");
          sendLargeMessageFiles(pendingLargeMessages);
+
+         System.out.println("11111111111111111 SENDING PAGING FILES");
          sendPagesToBackup(pageFilesToSync, pagingManager);
 
+         System.out.println("11111111111111111 LOCKING STORAGE MANAGER");
          storageManagerLock.writeLock().lock();
          try {
             if (replicator != null) {
+               System.out.println("11111111111111111 SENDING SYNC DONE");
                replicator.sendSynchronizationDone(nodeID, initialReplicationSyncTimeout);
                performCachedLargeMessageDeletes();
             }
diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicationEndpoint.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicationEndpoint.java
index 2802c91..1553554 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicationEndpoint.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicationEndpoint.java
@@ -169,6 +169,7 @@ public final class ReplicationEndpoint implements ChannelHandler, ActiveMQCompon
             return;
          }
 
+         System.out.println("2222222222222 RECEIVED PACKET: " + packet.getClass().getName());
          if (type == PacketImpl.REPLICATION_APPEND) {
             handleAppendAddRecord((ReplicationAddMessage) packet);
          } else if (type == PacketImpl.REPLICATION_APPEND_TX) {
diff --git a/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicationManager.java b/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicationManager.java
index 788021d..8302e38 100644
--- a/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicationManager.java
+++ b/artemis-server/src/main/java/org/apache/activemq/artemis/core/replication/ReplicationManager.java
@@ -255,6 +255,7 @@ public final class ReplicationManager implements ActiveMQComponent, ReadyListene
 
    @Override
    public synchronized void start() throws ActiveMQException {
+      System.out.println("********************** Using Latest Version *********************");
       if (started) {
          throw new IllegalStateException("ReplicationManager is already started");
       }
@@ -558,6 +559,7 @@ public final class ReplicationManager implements ActiveMQComponent, ReadyListene
                                     AbstractJournalStorageManager.JournalContent contentType,
                                     String nodeID,
                                     boolean allowsAutoFailBack) throws ActiveMQException {
+      System.out.println("11111111111111 SENDING REPLICATION START MESSAGE");
       if (enabled)
          sendReplicatePacket(new ReplicationStartSyncMessage(datafiles, contentType, nodeID, allowsAutoFailBack));
    }
@@ -571,6 +573,7 @@ public final class ReplicationManager implements ActiveMQComponent, ReadyListene
     * @param nodeID
     */
    public void sendSynchronizationDone(String nodeID, long initialReplicationSyncTimeout) {
+      System.out.println("11111111111111 SENDING SYNC DONE MESSAGE");
       if (enabled) {
 
          if (logger.isTraceEnabled()) {
-- 
2.7.4

